{"mappings":"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","sources":["src/utils.ts","src/world.ts","src/player.ts","src/mouse.ts","src/keyboard.ts","src/networking.ts","src/host.ts","src/particle.ts","src/game.ts"],"sourcesContent":["\r\nexport function showText(ctx: CanvasRenderingContext2D, text: string, X: number, Y: number, Size: number, colour: string = \"rgb(0, 0, 0)\", stroke: boolean = false) {\r\n    ctx.beginPath();\r\n    ctx.font = Size + \"px Arial\"\r\n    ctx.textAlign = \"center\";\r\n    if (stroke === false) {\r\n        ctx.fillStyle = colour;\r\n        ctx.fillText(text, X, Y);\r\n    }\r\n    if (stroke === true) {\r\n        ctx.lineWidth = Size / 25;\r\n        ctx.strokeStyle = colour;\r\n        ctx.strokeText(text, X, Y)\r\n    }\r\n}\r\n\r\nexport class Vector2{\r\n    x: number;\r\n    y: number;\r\n    constructor(x: number, y: number){\r\n        this.x = x;\r\n        this.y = y;\r\n    }\r\n    \r\n    // makes the vector have length 1 from origin\r\n    normalize(): Vector2{\r\n        // creates a new vector2\r\n        let l = Math.sqrt(this.x**2 + this.y**2)\r\n        return new Vector2(this.x/l, this.y/l)\r\n    }\r\n    \r\n    angleFrom(from=new Vector2(0, 0)): number{\r\n        return Math.atan2(this.y-from.x, this.x-from.y);\r\n    }\r\n    angleTo(to: Vector2): number{\r\n        return Math.atan2(to.y-this.y, to.x-this.x)\r\n    }\r\n    length(): number{\r\n        return Math.sqrt(this.x**2 + this.y**2)\r\n    }\r\n\r\n    distanceTo(to:Vector2){\r\n        return Math.sqrt((to.x-this.x)**2 + (to.y-this.y)**2)\r\n    }\r\n\r\n    // transforms a position from world corodinates to screen cordinates\r\n    worldToView(view: Rect): Vector2{\r\n        return new Vector2(\r\n            (this.x-view.x) / view.w,\r\n            (this.y-view.y) / view.h,\r\n        )\r\n    }\r\n\r\n    // transform a screen position 0-1 to pixel cordinate\r\n    screenToPixel(canvas: HTMLCanvasElement): Vector2{\r\n        return new Vector2(scaleNumber(this.x, 0, 1, 0, canvas.width), scaleNumber(this.y, 0, 1, 0, canvas.height))\r\n    }\r\n\r\n    // from world to screen pixels\r\n    worldToPixel(view:Rect, canvas: HTMLCanvasElement): Vector2{\r\n        return this.worldToView(view).screenToPixel(canvas)\r\n    }\r\n\r\n    interpolate(other:Vector2, n=0.5){\r\n        // n at 1 is other, n at 0 is this\r\n        return new Vector2(this.x*(1-n)+other.x*n ,  this.y*(1-n)+other.y*n)\r\n    }\r\n\r\n    minus(other: Vector2): Vector2{\r\n        return new Vector2(this.x-other.x, this.y-other.y)\r\n    }\r\n    plus(other: Vector2): Vector2{\r\n        return new Vector2(this.x+other.x, this.y+other.y)\r\n    }\r\n    times(other: Vector2 | number): Vector2{\r\n        if(typeof(other) === \"number\"){\r\n            return new Vector2(this.x*other, this.y*other)\r\n        }else{\r\n            return new Vector2(this.x*other.x, this.y*other.y)\r\n        }\r\n    }\r\n\r\n    equals(other: Vector2): boolean{\r\n        return other.x===this.x && other.y===this.y;\r\n    }\r\n    // to prevent shallow copying\r\n    copy(): Vector2{\r\n        return new Vector2(this.x, this.y)\r\n    }\r\n}\r\n\r\nexport class Rect{\r\n    x: number;\r\n    y: number;\r\n    w: number;\r\n    h: number;\r\n    constructor(x: number, y: number, w: number, h: number){\r\n        this.x = x;\r\n        this.y = y;\r\n        this.w = w;\r\n        this.h = h;\r\n    }\r\n    NW(): Vector2{\r\n        return new Vector2(this.x, this.y)\r\n    }\r\n    NE(): Vector2{\r\n        return new Vector2(this.x+this.w, this.y)\r\n    }\r\n    SW(): Vector2{\r\n        return new Vector2(this.x, this.y+this.h)\r\n    }\r\n    SE(): Vector2{\r\n        return new Vector2(this.x+this.w, this.y+this.h)\r\n    }\r\n    middle(): Vector2{\r\n        return new Vector2(this.x+this.w/2, this.y+this.h/2)\r\n    }\r\n    setMid(pos: Vector2){\r\n        this.x = pos.x-this.w/2\r\n        this.y = pos.y-this.h/2\r\n    }\r\n    checkPos(pos: Vector2): boolean{\r\n        // does a box check for wether the pos is in this\r\n        return (\r\n            pos.x > this.x &&\r\n            pos.x < this.x+this.w &&\r\n            pos.y > this.y &&\r\n            pos.y < this.y+this.h\r\n        ) \r\n    }\r\n\r\n    // transforms a position from world corodinates to screen cordinates\r\n    worldToView(view: Rect): Rect{\r\n        return new Rect(\r\n            (this.x-view.x) / view.w,\r\n            (this.y-view.y) / view.h,\r\n            this.w/view.w,\r\n            this.h/view.h,\r\n        )\r\n    }\r\n\r\n    // transform a screen position 0-1 to pixel cordinate\r\n    screenToPixel(canvas: HTMLCanvasElement): Rect{\r\n        return new Rect(this.x*canvas.width, this.y*canvas.height, this.w*canvas.width, this.h*canvas.height)\r\n    }\r\n\r\n    // from world to screen pixels\r\n    worldToPixel(view:Rect, canvas: HTMLCanvasElement): Rect{\r\n        return this.worldToView(view).screenToPixel(canvas)\r\n    }\r\n}\r\n\r\n// scales a number from range x1-x2 to range z1-z2\r\nexport function scaleNumber(n: number, x1: number, x2: number, z1: number, z2: number, doClamp = false): number{\r\n\tvar range1 = x2-x1;\r\n\tvar range2 = z2-z1;\r\n\tvar ratio = (n - x1) / range1\r\n    var result = ratio * range2 + z1\r\n    if(doClamp){\r\n    \treturn clamp(result, z1, z2);\r\n    }else{\r\n    \treturn result;\r\n    }\r\n}\r\n\r\nexport function clamp(n: number, min: number, max: number): number{\r\n\treturn Math.min(Math.max(n, min), max);\r\n}\r\n// ctx.fillStyle = \"#\"+Math.floor(Math.random()*16777215).toString(16); // random colour\r\n\r\nexport function round(n: number, to=0){\r\n    let power = 10**to;\r\n    return Math.round(n*power)/power;\r\n}\r\nexport function myRandom(min: number, max: number): number{\r\n    return Math.random()*(max-min)+min;\r\n}\r\n\r\nexport interface Line{\r\n    p1: Vector2;\r\n    p2: Vector2;\r\n}\r\n\r\nexport function getLineRect(line: Line, margin = 0.01): Rect{\r\n    // gets an outer bounding rectangle for a line\r\n    const x1 = Math.min(line.p1.x, line.p2.x)-margin;\r\n    const y1 = Math.min(line.p1.y, line.p2.y)-margin;\r\n    const x2 = Math.max(line.p1.x, line.p2.x)+margin;\r\n    const y2 = Math.max(line.p1.y, line.p2.y)+margin;\r\n    \r\n    return new Rect(x1, y1, x2-x1, y2-y1)\r\n}\r\n\r\nfunction lerp(a:number, b:number, n:number): number{\r\n    return a*(1-n) + b*n;\r\n}\r\n\r\nexport class Colour{\r\n    // holds three number, can be rgb or hsl. as well as a alpha\r\n    a: number;\r\n    b: number;\r\n    c: number;\r\n    alpha: number;\r\n    constructor(a: number, b:number, c:number, alpha: number){\r\n        this.a = a;\r\n        this.b = b;\r\n        this.c = c;\r\n        this.alpha = alpha;\r\n    }\r\n    lerp(other: Colour, n: number = 0.5){\r\n        return new Colour(\r\n            lerp(this.a, other.a, n),\r\n            lerp(this.b, other.b, n),\r\n            lerp(this.c, other.c, n),\r\n            lerp(this.alpha, other.alpha, n)\r\n        )\r\n    }\r\n    toRgb(): string{\r\n        return `rgba(${this.a}, ${this.b}, ${this.c}, ${this.alpha})`\r\n    }\r\n    toHsl(): string{\r\n        return `hsla(${this.a}, ${this.b}, ${this.c}, ${this.alpha})`\r\n    }\r\n}","// import { Random, MersenneTwister19937 } from \"random-js\";\r\nimport { getLineRect, Line, round, Vector2 } from \"./utils\";\r\n\r\n\r\nexport type World = Array<Line>\r\n\r\nexport function checkCollisions(map: World, curPos: Vector2, lastPos: Vector2): Line | void{\r\n    let ofInterest = []; // lines who we are in the box collider of\r\n    // for every line\r\n    for(let line of map){\r\n        // do box check\r\n        const lineBox = getLineRect(line);\r\n        if(lineBox.checkPos(curPos)){\r\n            ofInterest.push(line);\r\n        }\r\n    }\r\n\r\n    // checks if your angle from one end of the line has crossed over 0 since the last update\r\n    for(let line of ofInterest){\r\n        const lineAngle = line.p1.angleTo(line.p2)\r\n\r\n        // find angles from line.p1 to us relative to line\r\n        const curAngle = line.p1.angleTo(curPos) - lineAngle\r\n        const lastAngle = line.p1.angleTo(lastPos) - lineAngle\r\n\r\n        if(Math.sign(curAngle) !== Math.sign(lastAngle)){ // flipped sides of the line\r\n            if(Math.abs(curAngle) < 0.2){ // to prevent collisions on back side of line (where angles would be ~pi)\r\n                if(line.p1.distanceTo(line.p2) > line.p1.distanceTo(curPos)){ // prevent collisions on far end of line\r\n                    return line\r\n                }else{\r\n                    console.log(\"passed line far\")\r\n                }\r\n            }else{\r\n                console.log(\"passed line close\")\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\n// checks if two lines have a shared point\r\nfunction checkShared(l1: Line, l2: Line): boolean{\r\n    return (\r\n        l1.p1.equals(l2.p1) ||\r\n        l1.p2.equals(l2.p2) ||\r\n        l1.p1.equals(l2.p2)\r\n    )\r\n}\r\n\r\n// checks if two lines are parralel\r\nfunction checkParr(l1: Line, l2: Line): boolean{\r\n    const ang1 = round(l1.p1.angleTo(l1.p2), 3);\r\n    const ang1Inv = round(l1.p2.angleTo(l1.p1), 3);\r\n    const ang2 = round(l2.p1.angleTo(l2.p2), 3);\r\n    return ang2 == ang1 || ang2 == ang1Inv;\r\n\r\n}\r\nconst MAX_LINE_LENGTH = 5;\r\n// generate map\r\nexport function generateMap(seed: number, size = 15, density = 0.1): World {\r\n    let lines: World = []\r\n    console.log(`map seed ${seed}`)\r\n    // const random = new Random(MersenneTwister19937.seed(seed));\r\n    // create random lines\r\n    for (let i = 0; i < (size ** 2) * density; i++) {\r\n        let x1 = 1//random.integer(0, size)\r\n        let y1 = 1//random.integer(0, size)\r\n        let x2 = x1 + 1//random.integer(-1, 1)\r\n        let y2 = y1 + 1//random.integer(-1, 1)\r\n        // to stop starting and ending on the same spot\r\n        while((x1==x2 && y1==y2) || x2 > size || x2 < 0 || y2 > size || y2 < 0){\r\n            x2 = x1 + 1//random.integer(-1, 1)\r\n            y2 = y1 + 1//random.integer(-1, 1)\r\n        }\r\n        lines.push({ p1: new Vector2(x1 / size, y1 / size), p2: new Vector2(x2 / size, y2 / size)})\r\n    }\r\n\r\n    // let newLines: Map = []\r\n    // // check for long straight lines and combined\r\n    // for(let line of lines){\r\n    //     // for each line check for other lines with shared points\r\n    //     const shareds = lines.filter(x=>checkShared(line, x))\r\n    //     if(shareds.length === 0){\r\n    //         newLines.push(line);\r\n    //     }else{\r\n    //         for(let shared in shareds){\r\n    //             if(checkParr)\r\n    //         }\r\n    //     }\r\n    // }\r\n    return lines\r\n}","\r\nimport { checkCollisions, World } from \"./world\";\r\nimport { playerInputMessage } from \"./networking\";\r\nimport { clamp, Rect, round, scaleNumber, showText, Vector2 } from \"./utils\";\r\nimport { ctx, canvas } from \"./index\";\r\n\r\n\r\nexport interface playerData{\r\n    x: number;\r\n    y: number;\r\n    angle: number;\r\n    speed: number;\r\n    id: number;\r\n    swingPos?: Vector2; // if its not there their not holding anything\r\n    lookAngle: number;\r\n    ping: number;\r\n    bulletPos?: Vector2;\r\n    bulletAngle?: number;\r\n    bulletAge?: number;\r\n  }\r\n\r\nexport class Player {\r\n    /*\r\n    used by client for keeping track of player to do interpolaten, prediction and rendering\r\n    used by host for simulation and other things\r\n    */\r\n    pos: Vector2 = new Vector2(0, 0);\r\n    lastPos: Vector2 = new Vector2(0, 0); // used for collision\r\n    id: number;\r\n    speed = 0;\r\n    angle = 0;\r\n\r\n    // maybe make vector 2\r\n    inputX = 0; // input x is rotational input\r\n    inputY = 0; // input y is speed input\r\n\r\n    TURN = 0.8; // multipliers for speed\r\n    ACCEL = 0.015;\r\n    SWING_ACCEL = 0.01;\r\n    SWING_TURN = 0.0;\r\n    MAX_SPEED = 5;\r\n    DRAG = 0.12;\r\n    WALL_BOUNCE = 0.6;\r\n\r\n    swingPos = new Vector2(0, 0);\r\n    recentlySwung: Array<{ p: Vector2; t: number; }> = [];\r\n    swingDist = 0;\r\n    swinging = false;\r\n    wasSwinging = false; // was swinging last frame\r\n    wasNetSwinging = false; // was swinging last network tick\r\n\r\n    SWING_COOLDOWN = 1.5;\r\n\r\n    bulletPos: Vector2 = new Vector2(0, 0); // since each player can have max 1 bullet it dosent make sense to have a seperate class\r\n    bulletAngle: number = 0;\r\n    bulletAge: number = 0;\r\n    bulletAlive: boolean = false;\r\n    BULLET_SPEED = 0.1; // map widths per second\r\n    BULLET_LIFETIME = 3; // seconds\r\n    lastBulletPos: Vector2 = new Vector2(0, 0)\r\n    onCreateExplosion: (pos: Vector2) => void = (_)=>{};\r\n\r\n    lookAngle = 0;\r\n    health = 100;\r\n\r\n    ping = 0; // used by host only\r\n\r\n    constructor(id: number, createBullet: (pos: Vector2)=>void) {\r\n        this.id = id;\r\n        if(createBullet){\r\n            this.onCreateExplosion = createBullet;\r\n        }\r\n    }\r\n\r\n\r\n    public static fromPlayerData(data: playerData, createBullet: (pos: Vector2)=>void){\r\n        if('id' in data){\r\n            return Object.assign(new Player(data.id, createBullet), data);\r\n        }else{\r\n            throw \"tried to create a player without id\"\r\n        }\r\n    }\r\n\r\n    public static newRandom(id: number, createBullet: (pos: Vector2)=>void): Player{\r\n        let p = new Player(id, createBullet)\r\n        p.pos.x = Math.random();\r\n        p.pos.y = Math.random();\r\n        return p\r\n    }\r\n\r\n    render(camera: Rect) { \r\n        const drawPos = this.pos.worldToPixel(camera, canvas)\r\n        if(this.swinging){\r\n            const swingDrawPos = this.swingPos.worldToPixel(camera, canvas);\r\n            ctx.beginPath();\r\n            ctx.strokeStyle = \"rgba(0, 0, 0, 0.9)\";\r\n            ctx.lineWidth = 4;\r\n            ctx.moveTo(drawPos.x, drawPos.y);\r\n            ctx.lineTo(swingDrawPos.x, swingDrawPos.y);\r\n            ctx.stroke();\r\n        }\r\n\r\n        // body cirlce\r\n        ctx.beginPath();\r\n        ctx.strokeStyle = \"gray\";\r\n        ctx.lineWidth = 6;\r\n        ctx.arc(drawPos.x, drawPos.y, 20, 0, Math.PI * 2);\r\n        ctx.stroke();\r\n\r\n        // turret\r\n        // ctx.beginPath();\r\n        // ctx.strokeStyle = \"blue\";\r\n        // ctx.lineWidth = 10;\r\n        // ctx.beginPath();\r\n        // ctx.moveTo(drawPos.x, drawPos.y);\r\n        // ctx.lineTo(drawPos.x+Math.cos(this.lookAngle)*40, drawPos.y+Math.sin(this.lookAngle)*40);\r\n        // ctx.stroke()\r\n\r\n        // body direction indicator\r\n        ctx.beginPath();\r\n        ctx.strokeStyle = \"grey\"\r\n        ctx.lineWidth = 6;\r\n        ctx.moveTo(drawPos.x, drawPos.y);\r\n        ctx.lineTo(drawPos.x+Math.cos(this.angle)*30, drawPos.y+Math.sin(this.angle)*30);\r\n        ctx.stroke()\r\n\r\n        // bullet\r\n        if(this.bulletAlive){\r\n            const bulletDrawPos = this.bulletPos.worldToPixel(camera, canvas);\r\n            ctx.beginPath();\r\n            ctx.fillStyle = \"black\";\r\n            ctx.arc(bulletDrawPos.x, bulletDrawPos.y, 10, 0, Math.PI * 2);\r\n            ctx.fill();\r\n        }\r\n\r\n        // ping\r\n        showText(ctx, `id: ${this.id}  ${round(this.ping, 2)}ms`, drawPos.x, drawPos.y-30, 10);\r\n    }\r\n    update(dt: number, map: World) {\r\n        this.lastPos = new Vector2(this.pos.x, this.pos.y);\r\n        const dts = dt/1000;\r\n        if(this.swinging){\r\n            this.swingDist += this.inputX * dts * this.SWING_TURN;\r\n            this.speed += this.inputY * dts * this.SWING_ACCEL;\r\n            // get position relative to handle\r\n            const relPos = this.pos.minus(this.swingPos)\r\n            // find the next position\r\n            const nextPos = new Vector2(\r\n                relPos.x + dts * Math.cos(this.angle) * this.speed,\r\n                relPos.y + dts * Math.sin(this.angle) * this.speed\r\n            )\r\n            // clamp it to the distance\r\n            const clampPos = nextPos.normalize().times(this.swingDist)\r\n            // update the speed\r\n            const displacment = clampPos.minus(relPos) // amount moved this update\r\n            if(this.wasSwinging == false){ // only set speed on first update to prevent unintentional \"drag\" from rotation\r\n                this.speed = displacment.length()/dts\r\n            }\r\n            // update the angle (maybe need change)\r\n            this.angle = Math.atan2(displacment.y, displacment.x);\r\n            // actuall move player\r\n            this.pos = this.swingPos.plus(clampPos);\r\n            this.wasSwinging = true;\r\n        }else{ // not swinging\r\n\r\n            for(let pos of this.recentlySwung){pos.t -= dts;} // decriment swung timer\r\n            this.recentlySwung = this.recentlySwung.filter(x=>x.t>0) // remove old swung poss\r\n            \r\n            this.speed += this.inputY * dts * this.ACCEL;\r\n            this.angle += this.inputX * dts * this.TURN;\r\n\r\n            this.speed *= 1-(this.DRAG*dts)\r\n\r\n            this.pos.x += dts * Math.cos(this.angle) * this.speed;\r\n            this.pos.y += dts * Math.sin(this.angle) * this.speed;\r\n            this.wasSwinging = false;\r\n        }\r\n\r\n        /////////// COLLISION //////////\r\n        const colLine = checkCollisions(map, this.pos, this.lastPos)\r\n        if(colLine){\r\n            this.pos = this.lastPos;\r\n            this.speed *= this.WALL_BOUNCE;\r\n\r\n            const lineAngle = colLine.p1.angleTo(colLine.p2)\r\n            // find angles from line.p1 to us relative to line\r\n            const curAngle = colLine.p1.angleTo(this.pos) - lineAngle\r\n\r\n            const normal = lineAngle - (Math.sign(curAngle)*Math.PI/2) // line angle +- half pi\r\n            const angleToNormal = normal-(this.angle-Math.PI);\r\n            console.log(this.angle, normal)\r\n            this.angle = normal + angleToNormal;\r\n            console.log(\"hit line\")\r\n        }\r\n\r\n        //////////// BULLET /////////////////\r\n        if(this.bulletAlive){\r\n            this.bulletPos.x += Math.cos(this.bulletAngle) * this.BULLET_SPEED * dts;\r\n            this.bulletPos.y += Math.sin(this.bulletAngle) * this.BULLET_SPEED * dts;\r\n            this.bulletAge += dts;\r\n            if(this.bulletAge > this.BULLET_LIFETIME){\r\n                this.bulletAlive = false;\r\n            }\r\n        \r\n            const bulletColLine = checkCollisions(map, this.bulletPos, this.lastBulletPos)\r\n            if(bulletColLine){\r\n                this.bulletAlive = false;\r\n                this.onCreateExplosion(this.bulletPos)\r\n            }\r\n\r\n            this.lastBulletPos = this.bulletPos.copy()\r\n        }\r\n\r\n        // this.x = (this.targetX + this.x)/2; // smoothing because position from networking may be jerky\r\n        // this.y = (this.targetY + this.y)/2; \r\n    }\r\n\r\n    networkUpdate(player: playerData) {\r\n        if (player.id === this.id) {\r\n            this.pos.x = player.x;\r\n            this.pos.y = player.y;\r\n            this.speed = player.speed;\r\n            this.angle = player.angle;\r\n            this.lookAngle = player.lookAngle;\r\n            this.ping = player.ping\r\n            if(player.swingPos){\r\n                this.swingPos = new Vector2(player.swingPos.x, player.swingPos.y);\r\n                this.swinging = true;\r\n                this.swingDist = this.pos.distanceTo(this.swingPos);\r\n                this.wasNetSwinging = true;\r\n            }else{\r\n                if(this.wasNetSwinging){ // just stopped swinging\r\n                    console.log(\"added to recently swung\")\r\n                    this.recentlySwung.push({p: this.swingPos, t:this.SWING_COOLDOWN});\r\n                }\r\n                this.swinging = false;\r\n                this.wasNetSwinging = false;\r\n            }\r\n            if(player.bulletPos && player.bulletAngle && player.bulletAge){\r\n                [this.bulletPos.x, this.bulletPos.y] = [player.bulletPos.x, player.bulletPos.y];\r\n                this.bulletAngle = player.bulletAngle;\r\n                this.bulletAge = player.bulletAge;\r\n                this.bulletAlive = true;\r\n            }else{\r\n                if(this.bulletAlive){\r\n                    this.bulletAlive = false;\r\n                    this.onCreateExplosion(this.bulletPos)\r\n                }\r\n            }\r\n        }\r\n    }\r\n    // controlUpdate(dt: number, keyboard: Keyboard, mouse: Mouse) {\r\n    //     let dts = dt/1000;\r\n    //     if(keyboard.checkKey(\"KeyW\")){\r\n    //         this.speed += dts*0.1\r\n    //     }\r\n    //     if(keyboard.checkKey(\"KeyS\")){\r\n    //         this.speed += dts*0.1\r\n    //     }\r\n    // }\r\n    toData(): playerData{\r\n        // returns playerData object for host to send to clients\r\n        let temp: playerData = {\r\n            id: this.id,\r\n            x: this.pos.x,\r\n            y: this.pos.y,\r\n            angle: this.angle,\r\n            speed: this.speed,\r\n            lookAngle: this.lookAngle,\r\n            ping: this.ping\r\n        }\r\n        if(this.swinging){\r\n            temp[\"swingPos\"] = this.swingPos;\r\n        }\r\n        if(this.bulletAlive){\r\n            temp[\"bulletAge\"] = this.bulletAge;\r\n            temp[\"bulletAngle\"] = this.bulletAngle;\r\n            temp[\"bulletPos\"] = this.bulletPos;\r\n        }\r\n        return temp;\r\n    }\r\n\r\n    setLookAngle(angle: number): void{\r\n        this.lookAngle = angle;\r\n    }\r\n\r\n    // host takes client input\r\n    takeInput(msg: playerInputMessage, map: World){\r\n        this.inputX = clamp(msg.data.inputX, -1, 1);\r\n        this.inputY = clamp(msg.data.inputY, -1, 1);\r\n        this.lookAngle = msg.data.lookAngle;\r\n        if(msg.data.swinging){ \r\n            if(!this.swinging){ // only if werent swinging last frame\r\n                console.log(\"set swinging\")\r\n                const closest = this.findClosestHandle(map)\r\n                this.swingPos = closest.pos;\r\n                this.swingDist = closest.dist;\r\n                this.swinging = true;\r\n            }\r\n        }else{\r\n            if(this.swinging){\r\n                this.recentlySwung.push({p: this.swingPos, t:this.SWING_COOLDOWN});\r\n            }\r\n            this.swinging = false;\r\n        }\r\n        if(msg.data.shooting){\r\n            if(this.bulletAlive === false){\r\n                this.bulletAlive = true;\r\n                this.bulletPos = this.pos.copy();\r\n                this.bulletAge = 0;\r\n                this.bulletAngle = this.angle; // this.lookAngle\r\n            }\r\n        }\r\n        if(msg.data.detonating){\r\n            if(this.bulletAlive){\r\n                this.bulletAlive = false;\r\n                this.onCreateExplosion(this.bulletPos)\r\n            }\r\n        }\r\n    }\r\n\r\n    findClosestHandle(map: World): {pos:Vector2, dist:number}{\r\n        let minDist = 9999;\r\n        let minPos = new Vector2(0, 0)\r\n        for(let line of map){\r\n            const dist1 = (line.p1.x-this.pos.x)**2 + (line.p1.y-this.pos.y)**2;\r\n            if(dist1 < minDist){\r\n                if(!this.recentlySwung.some((x)=>x.p.equals(line.p1))){\r\n                    minDist = dist1;\r\n                    minPos = line.p1;\r\n                }\r\n            }\r\n            const dist2 = (line.p2.x-this.pos.x)**2 + (line.p2.y-this.pos.y)**2;\r\n            if(dist2 < minDist){\r\n                if(!this.recentlySwung.some((x)=>x.p.equals(line.p2))){\r\n                    minDist = dist2;\r\n                    minPos = line.p2;\r\n                }\r\n            }\r\n        }\r\n        return {pos:minPos, dist:Math.sqrt(minDist)};\r\n    }\r\n\r\n    /**\r\n     * \r\n     * @param pos \r\n     * @param size size of impulse \r\n     * @param speed speed per seoncd to give if at pos, linearly goes to zero at size distance\r\n     * @param dmg damage to inflict if at pos, ^\r\n     */\r\n    impulseFrom(pos: Vector2, size: number, speed: number = 0.1, dmg=100){\r\n        const fakeDt = 0.00001;\r\n        const diff = pos.minus(this.pos); // vector to get from player to pos\r\n        const dist = scaleNumber(diff.length(), 0, size, 1, 0);\r\n        if(diff.length() < size){\r\n            let newPos = this.pos.plus( diff.normalize().times( (-1) * dist * speed) ) // move player away from pos by dist * speed\r\n            newPos = newPos.plus(new Vector2(Math.cos(this.angle) * this.speed, Math.sin(this.angle) * this.speed)) // move player as noramlly\r\n            // work out new angle and speed\r\n            this.angle = this.pos.angleTo(newPos);\r\n            this.speed = this.pos.distanceTo(newPos);\r\n        }\r\n    }\r\n}\r\n","import { canvas } from \"./index\";\r\n\r\nclass Mouse{\r\n    x: number = 0;\r\n    y: number = 0;\r\n    left: boolean = false;\r\n    hasLeft: boolean = false;\r\n    right: boolean = false;\r\n    hasRight: boolean = false;\r\n    middle: boolean = false;\r\n    hasMiddle: boolean = false;\r\n\r\n\tconstructor(){ // canvas: HTMLCanvasElement\r\n\r\n\t\tdocument.addEventListener('mousemove', (evt: MouseEvent) => {\r\n\t\t\tconst rect: DOMRect = canvas.getBoundingClientRect();\r\n\t\t\tthis.x = evt.clientX - rect.left;\r\n\t\t\tthis.y = evt.clientY - rect.top;\r\n\t\t}, false);\r\n\r\n\t\tdocument.addEventListener('mousedown', (event: MouseEvent) => {\r\n            switch(event.button){\r\n                case 0:\r\n                    this.left = true;\r\n                    this.hasLeft = true;\r\n                    break;\r\n                case 1:\r\n                    this.middle = true;\r\n                    this.hasMiddle = true;\r\n                    break;\r\n                case 2:\r\n                    this.right = true;\r\n                    this.hasRight = true;\r\n            }\r\n            console.log(this)\r\n\t\t});\r\n\t\tdocument.addEventListener('mouseup', (event: MouseEvent) => {\r\n\t\t\tswitch(event.button){\r\n                case 0:\r\n                    this.left = false;\r\n                    break;\r\n                case 1:\r\n                    this.middle = false;\r\n                    break;\r\n                case 2:\r\n                    this.right = false;\r\n            }\r\n\t\t});\r\n\t}\r\n\r\n    // wether the button has been clicked since last call to this\r\n    hasClicked(which: \"left\" | \"middle\" | \"right\"): boolean {\r\n        if(this[which]){\r\n            this[which] = false;\r\n            return true\r\n        }\r\n        return false\r\n    }\r\n}\r\n\r\nexport const mouse = new Mouse();","\r\nclass Keyboard{\r\n    /*\r\n    The keys system currently works by adding any key pressed into the keys object\r\n    the key is the key name and the value is a bool of if it is pressed\r\n    */\r\n\r\n    keys: { [index:string] : boolean } = {};\r\n    pressedAnyKey: boolean = false; //initially false then true forever after any keypress\r\n\r\n    constructor(){\r\n        document.addEventListener('keydown', (event) => {\r\n            this.keys[event.code] = true;\r\n            this.pressedAnyKey = true;\r\n            // console.log(this.keys)\r\n        });\r\n        document.addEventListener('keyup', (event) => {\r\n            this.keys[event.code] = false;\r\n        });\r\n    }\r\n    checkKey(key: string): boolean{\r\n        if(key in this.keys){\r\n            return this.keys[key];\r\n        }else{\r\n            return false; // key has never been pressed yet\r\n        }\r\n    }\r\n}\r\n\r\nexport const keyboard = new Keyboard();\r\n","// https://developer.valvesoftware.com/wiki/Source_Multiplayer_Networking\r\n// https://raymondgh.github.io/webrtc.html\r\n\r\nimport { World } from \"./world\";\r\nimport { playerData } from \"./player\";\r\n\r\n\r\nconst WS_SERVER = \"wss://multiplayer-backend.olikat.repl.co\"\r\n\r\ninterface mapMessage {\r\n  type: \"world-data\";\r\n  data: number; // seed\r\n}\r\n\r\nexport interface playerStateMessage { // send from host to clients\r\n  // gives out athorative positions of all players to each client, dosent contain all players, just nearby ones\r\n  type: \"game-state\";\r\n  data: Array<playerData>;\r\n  frame: number;\r\n}\r\n\r\nexport interface playerInputMessage{ // send from clients to host\r\n  type: \"player-input\";\r\n  data: {\r\n    inputY: number,\r\n    inputX: number,\r\n    lookAngle: number;\r\n    // all action input are optional to save data, assumed false when not present\r\n    swinging? : boolean,\r\n    shooting? : boolean,\r\n    detonating? : boolean,\r\n  },\r\n}\r\n\r\nexport interface pong{\r\n  type: \"pong\";\r\n  frame: number;\r\n}\r\n\r\nexport type peerInterface = mapMessage | playerInputMessage | playerStateMessage | pong;\r\n\r\n\r\ninterface RTCDataSignal {\r\n  src: number;\r\n  dst: number;\r\n  messageType: 'data-offer' | 'data-answer';\r\n  sessionDescription: RTCSessionDescriptionInit;\r\n}\r\ninterface RTCIceSignal {\r\n  src: number;\r\n  dst: number;\r\n  messageType: 'ice-candidate';\r\n  candidate: RTCIceCandidate;\r\n}\r\ntype RTCSignal = RTCIceSignal | RTCDataSignal;\r\n\r\n\r\nclass Peer {\r\n  peerConnection: RTCPeerConnection;\r\n  dataChannel?: RTCDataChannel;\r\n  id: number; // id is the id for the remote\r\n  localId: number; // local id is the id of this peer\r\n  ready: boolean = false; // ready to send p2p messages\r\n  wsSender: (message: RTCSignal) => void;\r\n  onPeerMsg: (message: peerInterface, id: number) => void;\r\n  onPeerReady: (id: number) => void;\r\n\r\n  constructor(id: number, localId: number,\r\n    signaler: (message: RTCSignal) => void,\r\n    onPeerMsg: (message: peerInterface, id: number) => void,\r\n    onNewPeerReady: (id: number)=>void\r\n  ) {\r\n    this.peerConnection = new RTCPeerConnection();\r\n    this.id = id;\r\n    this.localId = localId;\r\n    this.wsSender = signaler;\r\n    this.onPeerMsg = onPeerMsg;\r\n    this.onPeerReady = onNewPeerReady;\r\n\r\n    // first set callbacks for once data channel is open\r\n    // once data channel is created this is called\r\n    this.peerConnection.ondatachannel = event => {\r\n      this.dataChannel = event.channel;\r\n      console.log(\"on data channel called\")\r\n      this.setDatachannelCallbacks()\r\n    }\r\n\r\n    // triggered by setting local description\r\n    // create and send ice candidate\r\n    this.peerConnection.onicecandidate = (event) => {\r\n      // onicecandidates keep coming until an empty event is passed\r\n      // console.log(`event given to onicecandidate ${JSON.stringify(event)}`)\r\n      if (event.candidate) {\r\n        // prepare a message to send to peer 2\r\n        let message: RTCIceSignal = {\r\n          src: this.localId,\r\n          dst: this.id,\r\n          messageType: 'ice-candidate',\r\n          candidate: event.candidate\r\n        };\r\n\r\n        console.log(\"ice candidate generated and send\")\r\n        this.wsSender(message);\r\n      } else {\r\n        // no more candidates to send\r\n        console.log(\"All ICE candidates sent!\")\r\n      }\r\n    }\r\n  }\r\n\r\n  private setDatachannelCallbacks() {\r\n    console.log(`set data channel callbacks ${this.dataChannel}`)\r\n    if (this.dataChannel) { // checks if its not null\r\n      // some data channel handlers for peer 1\r\n      this.dataChannel.onopen = event => {\r\n        console.log(\"All set!\");\r\n        this.ready = true;\r\n        this.onPeerReady(this.id);\r\n      }\r\n\r\n      this.dataChannel.onclose = event => {\r\n        console.log(\"P1: Hey, my data channel was closed!\");\r\n      }\r\n\r\n      this.dataChannel.onmessage = event => {\r\n        // console.log(\"P1: I just got this message:\");\r\n        // console.log(event.data);\r\n        this.onPeerMsg(JSON.parse(event.data), this.id)\r\n      }\r\n    }else{\r\n      console.log(\"data channel didnt exist to set callbacks\")\r\n    }\r\n  }\r\n\r\n  public sendString(data: string) {\r\n    if (this.ready) {\r\n      // console.log(`send message ${JSON.stringify(data)}`)\r\n      this.dataChannel!.send(data);\r\n    } else {\r\n      console.log(\"tried to send before ready\")\r\n      console.log(this)\r\n    }\r\n  }\r\n  public sendObject(object: any) {\r\n    this.sendString(JSON.stringify(object))\r\n  }\r\n\r\n  public createDataOffer() {\r\n    this.peerConnection.createOffer().then((OfferRTCSessionDescription) => {\r\n      // peer1, the offerer, will set the offer to be its Local Description\r\n      // setting Local Description triggers the peer1connection.onicecandidate event!!\r\n      this.peerConnection!.setLocalDescription(OfferRTCSessionDescription);\r\n\r\n      // Prepare a message to send to peer 2\r\n      let message: RTCDataSignal = {\r\n        src: this.localId!,\r\n        dst: this.id,\r\n        messageType: 'data-offer',\r\n        sessionDescription: OfferRTCSessionDescription\r\n      };\r\n      console.log(OfferRTCSessionDescription)\r\n\r\n      // send OfferRTCSessionDescription to peer2 via signaling server\r\n      // this.socket.send(JSON.stringify({type:\"rtc-signal\", signal:message}));\r\n      this.wsSender(message)\r\n\r\n      this.setDatachannelCallbacks()\r\n    })\r\n    this.dataChannel = this.peerConnection.createDataChannel(\"myFirstDataChannel\")\r\n  }\r\n\r\n  // handle offer, means someones trying to join us\r\n  public handleDataOffer(message: RTCDataSignal) {\r\n    this.peerConnection.setRemoteDescription(message.sessionDescription);\r\n\r\n    // then create the response\r\n    this.peerConnection.createAnswer().then((AnswerRTCSessionDescription) => {\r\n      console.log(\"created answer\")\r\n      // set the localdescription as the answer\r\n      // setting Local Description triggers the peer2connection.onicecandidate event!!\r\n      this.peerConnection.setLocalDescription(AnswerRTCSessionDescription);\r\n\r\n      // Prepare a message to send to peer 2\r\n      let answer: RTCDataSignal = {\r\n        src: message.dst,\r\n        dst: message.src,\r\n        messageType: 'data-answer',\r\n        sessionDescription: AnswerRTCSessionDescription,\r\n      };\r\n      this.wsSender(answer);\r\n    })\r\n  }\r\n\r\n  // when we recive a data answer just set it as description, onicecandidate will be called soon\r\n  public handleDataAnswer(message: RTCDataSignal) {\r\n    this.peerConnection.setRemoteDescription(message.sessionDescription);\r\n  }\r\n\r\n\r\n  public handleIceCandidate(message: RTCIceSignal) {\r\n    // get the candidate from the message\r\n    let candidate = new RTCIceCandidate(message.candidate);\r\n\r\n    // add the ice candidate to the connection\r\n    // will automatically call onicecandidate again if it dosent work\r\n    this.peerConnection!.addIceCandidate(candidate).then(() =>{\r\n        // it worked!\r\n        console.log('Ice Candidate successfully added to peerconnection')\r\n      },\r\n      // it didn't work!\r\n      err => {\r\n        console.log('PR 1: Oh no! We failed to add the candidate');\r\n        console.log(\"Here's the error:\", err);\r\n      });\r\n  }\r\n}\r\n\r\n\r\nvar pingTime = Date.now();\r\n\r\nclass Networking {\r\n  socket: WebSocket;\r\n  peers: Array<Peer> = []; // a host peer will have every peer in the game but a client will only connect to the host\r\n  id?: number;\r\n  gamesList: Array<number> = [];\r\n\r\n  // intended to be overridden by parents\r\n  onGameList: (list: Array<number>) => void; \r\n  onPeerMsg: (message: peerInterface, id: number) => void = (x)=>{};\r\n  onNewPeer: (id: number)=>void = (x)=>{};\r\n  onServerOpen: ()=>void = ()=>{};\r\n  visable: boolean = false;\r\n  hosting: boolean = false; // wether we are the host of the game\r\n  connected: boolean = false; // in a game rn\r\n\r\n  // constructor used to setup websockets connection with server\r\n  constructor() {\r\n    this.socket = new WebSocket(WS_SERVER)\r\n    this.socket.onopen = (e) => {\r\n      console.log(\"server connection opened\");\r\n      this.onServerOpen();\r\n      this.wsSend(\"get-id\"); // request an id as soon as the connection opens\r\n      setInterval(() => { this.wsSend(\"ping\"); pingTime = performance.now()}, 2000) // ping server to keep connection alive and server know if client still there\r\n    };\r\n\r\n    // callbacks for server message\r\n    this.socket.onmessage = (event) => {\r\n      try {\r\n        var msgObj = JSON.parse(event.data); // assumes its json\r\n      } catch {\r\n        console.log(\"recived non-json from server\")\r\n        return;\r\n      }\r\n      if (msgObj.type == \"give-id\") {\r\n        this.id = msgObj.data;\r\n        console.log(`got id: ${this.id}`)\r\n        this.wsSend(\"list-games\")\r\n      }\r\n      if (msgObj.type == \"games-list\") {\r\n        this.gamesList = msgObj.data;\r\n        console.log(`got games list: ${this.gamesList}`)\r\n        this.onGameList(this.gamesList);\r\n      }\r\n      if (msgObj.type == \"pong\") {\r\n        // this.socket.send(JSON.stringify({ping: true}))\r\n        // console.log(\"recived pong\")\r\n      }\r\n      if (msgObj.type == \"rtc-signal\") {\r\n        this.signalHandler(msgObj.data)\r\n      }\r\n    };\r\n\r\n    this.socket.onclose = function (event) {\r\n      if (event.wasClean) {\r\n        console.log(`[close] WS Connection closed cleanly, code=${event.code} reason=${event.reason}`);\r\n      } else {\r\n        // e.g. server process killed or network down\r\n        // event.code is usually 1006 in this case\r\n        console.log('[close] WS Connection died');\r\n      }\r\n    };\r\n    this.socket.onerror = function (error) {\r\n      console.log(`websocket error: ${error}`)\r\n      alert(`Server is starting up, please try again in a few seconds. ${error}`);\r\n    };\r\n\r\n    this.onGameList = () => { }; // just a placeholder, real callback is passed in call to this.getGames\r\n  }\r\n\r\n  public setOnPeerMsg(func: (msg: peerInterface, id: number) => void){\r\n    this.onPeerMsg = func;\r\n    for(let p of this.peers){\r\n      p.onPeerMsg = func;\r\n    }\r\n  }\r\n\r\n  public setOnNewPeer(func: (id: number)=>void): void{\r\n    this.onNewPeer = func;\r\n    for(let p of this.peers){\r\n      p.onPeerReady = func;\r\n    }\r\n  }\r\n\r\n  // either gets the existing remote with that id or creates one\r\n  private remoteFromId(id: number, dontCreate = false): Peer {\r\n    let temp = this.peers.filter(x => x.id == id) // filters only remotes with current id\r\n    if (temp.length >= 1) {\r\n      return temp[0]\r\n    } else {\r\n      if (dontCreate) {\r\n        throw \"ID dosent exist\"\r\n      }\r\n      const signaler = (response: RTCSignal) => { this.wsSend(\"rtc-signal\", response)}\r\n      let newRemote = new Peer(id, this.id!, signaler, this.onPeerMsg, this.onNewPeer);\r\n      this.peers.push(newRemote);\r\n      console.log(\"new peer\")\r\n      return this.peers[this.peers.length - 1];\r\n    }\r\n  }\r\n\r\n  // handles any WS messages with type 'rtc-signal'\r\n  private signalHandler(signal: RTCSignal) {\r\n\r\n    let curRemote = this.remoteFromId(signal.src); // gets or creates remote with correct id\r\n\r\n    console.log(\"handling signal\")\r\n    // call its handle function for this type of message\r\n    switch (signal.messageType) {\r\n      case \"data-offer\": // someone is trying to join us\r\n        if(this.connected){ // already in a game\r\n          if(this.hosting){ // we are the host\r\n            curRemote.handleDataOffer(signal)\r\n          }else{ // not host\r\n            console.log(\"someone tried to join us, not a host\")\r\n          }\r\n        }else{ // not already in a game\r\n          this.hosting = true;\r\n          curRemote.handleDataOffer(signal)\r\n        }\r\n        this.connected = true;\r\n        break;\r\n      case \"data-answer\":\r\n        this.hosting = false;\r\n        this.connected = true;\r\n        console.log(\"it was a data answer\")\r\n        curRemote.handleDataAnswer(signal)\r\n        break;\r\n      case \"ice-candidate\":\r\n        console.log(\"it was a ice candidate\")\r\n        curRemote.handleIceCandidate(signal)\r\n        break;\r\n      default:\r\n        console.log(\"invalid signal recived\")\r\n    }\r\n  }\r\n\r\n  // to create a p2p connection to gameId\r\n  public joinGame(gameId: number): void {\r\n    // clears previos connections\r\n    this.peers = [];\r\n    // sends initial RTC data-offer message to connect\r\n    if (!this.id) { console.log(\"tried to join a game before getting id\"); return }\r\n    this.hosting = false;\r\n    this.visable = false;\r\n    let curRemote = this.remoteFromId(gameId); // likely creates a new peer\r\n    curRemote.createDataOffer()\r\n  }\r\n\r\n  // send data to server\r\n  public wsSend(\r\n    type: \"get-id\" | \"give-id\" | \"list-games\" | \"change-game\" | \"join-game\" | \"rtc-signal\" | \"ping\",\r\n    data?: RTCSignal | number | boolean\r\n  ) {\r\n    this.socket.send(JSON.stringify({ type: type, data: data }))\r\n  }\r\n\r\n  public rtcSendString(data: string, target = -1) {\r\n    // set target to -1 to send to all peers\r\n    // set target to -2 to send to host (-1 mostly works but preffer -2 pls)\r\n    if(this.hosting){\r\n      if(target === -2){ // host trying to send to its self\r\n        this.onPeerMsg(JSON.parse(data), this.id!)\r\n        return;\r\n      }\r\n    }\r\n    if(this.connected){\r\n      if (target === -1 || target === -2) {\r\n        for (let p of this.peers) {\r\n          p.sendString(data)\r\n        }\r\n      } else {\r\n        this.remoteFromId(target).sendString(data)\r\n      }\r\n    }else{\r\n      alert(\"tried to rtcSend before connected\")\r\n    }\r\n  }\r\n\r\n  /**\r\n   * \r\n   * @param data peerInterface object to send\r\n   * @param target id of who to send to, -1 for all, -2 for host\r\n   */\r\n  public rtcSendObj(data: peerInterface, target = -1){\r\n    // if target is -1 it sends to all peers\r\n    // that means that on a client it sends to the host\r\n    this.rtcSendString(JSON.stringify(data), target)\r\n  }\r\n\r\n  public getGames(callback: (list: Array<number>) => void) {\r\n    this.wsSend(\"list-games\")\r\n    this.onGameList = callback;\r\n  }\r\n\r\n  public setVis(set: boolean): void{\r\n    // sets game visability\r\n    this.visable = set;\r\n    this.wsSend(\"change-game\", this.visable)\r\n  }\r\n\r\n  public toggleVis(): boolean{\r\n    this.setVis(!this.visable)\r\n    return this.visable;\r\n  }\r\n\r\n  // if all peers are ready to send info\r\n  public isReady(){\r\n    return this.peers.every(x=>x.ready)\r\n  }\r\n}\r\n\r\n// one singleton object shared between all modules using it\r\nexport const networking = new Networking()\r\n","import { Game, gamesListOuter } from \"./game\";\r\nimport { networking, playerInputMessage, playerStateMessage, pong } from \"./networking\";\r\nimport { Player } from \"./player\";\r\nimport { Line, round, Vector2 } from \"./utils\";\r\nimport { generateMap, World } from \"./world\";\r\n\r\n\r\n// only runs on the host, handles phisics, hitreg, game events\r\n// authorative on everything\r\nexport class GameHost {\r\n    tickrate = 30;\r\n    tickNum = 0;\r\n    tickTimes: Array<{num: number, time: number}> = [];\r\n    mapSeed = 379491230;\r\n    map: World = generateMap(this.mapSeed)\r\n    players: Array<Player> = [];\r\n    createExplosion: (pos: Vector2)=>void;\r\n\r\n    constructor() {\r\n        gamesListOuter!.style.transform = \"translate(-50%, -200%)\";\r\n        // override networkings callbacks\r\n        networking.setOnPeerMsg((msg, id) => {\r\n            // console.log(`recived message ${JSON.stringify(msg)}`)\r\n            switch(msg.type){\r\n                case(\"player-input\"):\r\n                    this.takePlayerInput(id, msg);\r\n                    break;\r\n                case(\"pong\"):\r\n                    this.takePing(id, msg);\r\n                    break;\r\n                default:\r\n                    console.log(\"host got something unknown\")\r\n            }\r\n        })\r\n        networking.setOnNewPeer(id => {\r\n            console.log(\"sending new client the map\")\r\n            networking.rtcSendObj({ type: \"world-data\", data: this.mapSeed }, id); // give the new client the map\r\n        })\r\n\r\n        setInterval(() => { this.tick() }, 1000 / this.tickrate) // set tick interval to send to clients\r\n        // console.log(\"sending initial clients the map\")\r\n        // networking.rtcSendObj({ type: \"world-data\", data: this.map })\r\n        console.log(\"created game host\")\r\n\r\n        this.createExplosion = (pos: Vector2)=>{\r\n            console.log(\"called host create explosion\")\r\n            for(let p of this.players){\r\n                p.impulseFrom(pos, 0.05)\r\n            }\r\n        }\r\n    }\r\n\r\n    tick() {\r\n        this.tickNum += 1;\r\n        if(this.tickTimes.push({num: this.tickNum, time: performance.now()}) >= 30){ // push returns length\r\n            this.tickTimes.shift()\r\n        }\r\n        // console.log(\"host network tick\")\r\n        // network tick\r\n        for (let player of this.players) {\r\n            const info = this.generateGameState(player.id)\r\n            if (player.id !== networking.id) {\r\n                networking.rtcSendObj(info, player.id)\r\n            } else {\r\n                // send to ourself\r\n                Game.onPeerMsg(info)\r\n            }\r\n        }\r\n    }\r\n\r\n    phyTick(dt: number) {\r\n        // phsics update happens more often than network tick\r\n        // is called from main animation loop\r\n\r\n        for (let player of this.players) {\r\n            player.update(dt, this.map)\r\n        }\r\n    }\r\n\r\n    // decides what data to send to the given player\r\n    generateGameState(id: number = -1): playerStateMessage {\r\n        // id for only sending whats near to the player\r\n        // -1 for sending everything\r\n        if (id == -1) {\r\n            return {\r\n                type: \"game-state\",\r\n                data: this.players.map(x => x.toData()),\r\n                frame: this.tickNum,\r\n            }\r\n        } else {\r\n            return {\r\n                type: \"game-state\",\r\n                // TODO: impliment filter on who to send to who\r\n                data: this.players.filter(x => true).map(x => x.toData()),\r\n                frame: this.tickNum,\r\n            }\r\n        }\r\n    }\r\n\r\n    takePing(id: number, msg: pong){\r\n        const timeMatches = this.tickTimes.filter(x=>x.num == msg.frame) // find the time the frame was send out\r\n        if(timeMatches.length >= 1){\r\n            var frameActualTime = timeMatches[0].time;\r\n        }else{\r\n            var frameActualTime = 0; // frame has been sent\r\n        }\r\n        const returnFrameTime = performance.now()\r\n        let matches = this.players.filter(x => x.id === id)\r\n        if (matches.length == 1) {\r\n            matches[0].ping = returnFrameTime-frameActualTime;\r\n        }\r\n    }\r\n\r\n    // recives player info\r\n    takePlayerInput(id: number, msg: playerInputMessage) {\r\n        let matches = this.players.filter(x => x.id === id)\r\n        if (matches.length == 1) {\r\n            matches[0].takeInput(msg, this.map)\r\n        } else if (matches.length > 1) {\r\n            console.log(`there were ${matches.length} players with the same id (too many)`)\r\n        } else {\r\n            console.log(\"tried to set player data on player that doesnt exist, creating player\")\r\n            this.players.push(Player.newRandom(id, this.createExplosion))\r\n        }\r\n    }\r\n}","import { Colour, myRandom, Rect, round, Vector2 } from \"./utils\";\r\nimport { ctx, canvas } from \"./index\";\r\n\r\n\r\n// meant to be controlled by particle group\r\nclass Particle{\r\n    pos: Vector2;\r\n    vel: Vector2;\r\n    size: number;\r\n    drag = 1; // 1 goes to 0 in ~5 seconds\r\n    // https://www.desmos.com/calculator/9aatwn0u0n\r\n\r\n    constructor(start_pos: Vector2, angle: number, speed: number, size: number){\r\n        // size in px, start_pos and speed in world units\r\n        this.pos = start_pos;\r\n        this.vel = new Vector2(Math.cos(angle)*speed, Math.sin(angle)*speed)\r\n        this.size = size;\r\n    }\r\n\r\n    render(view: Rect){\r\n        // doset set its own fill colour, should be set by particle group\r\n\r\n        const drawPos = this.pos.worldToPixel(view, canvas)\r\n        ctx.beginPath();\r\n        ctx.arc(drawPos.x, drawPos.y, this.size, 0, Math.PI*2)\r\n        ctx.fill()\r\n    }\r\n    /**\r\n     * \r\n     * @param dts delta time in seconds\r\n     */\r\n    update(dts: number){\r\n        this.vel = this.vel.times(1-(this.drag*dts))\r\n        this.pos = this.pos.plus(this.vel.times(dts))\r\n    }\r\n}\r\n\r\nclass ParticleGroup{\r\n    // a group of the same colour same size particles\r\n    particles: Array<Particle>\r\n    startCol: Colour;\r\n    endCol: Colour;\r\n    age = 0;\r\n    lifetime: number;\r\n    alive = true;\r\n\r\n    constructor(pos: Vector2, amount: number, size: number, minSpeed:number, maxSpeed:number, startCol:Colour, endCol:Colour, lifetime: number){\r\n        this.startCol = startCol;\r\n        this.endCol = endCol;\r\n        this.lifetime = lifetime;\r\n        this.particles = [];\r\n        for(let i = 0; i < amount; i++){\r\n            this.particles.push( new Particle(pos, myRandom(0, Math.PI*2), myRandom(minSpeed, maxSpeed), size))\r\n        }\r\n    }\r\n    update(dt: number){\r\n        this.age += dt/1000;\r\n        if(this.age > this.lifetime){\r\n            this.alive = false;\r\n        }\r\n        if(this.alive){\r\n            for(let p of this.particles){\r\n                p.update(dt/1000)\r\n            }\r\n        }\r\n    }\r\n    render(view: Rect){\r\n        if(this.alive){\r\n            ctx.fillStyle = this.startCol.lerp(this.endCol, this.age/this.lifetime).toRgb();\r\n            for(let p of this.particles){\r\n                p.render(view);\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\nclass ParticleManager{\r\n    groups: Array<ParticleGroup> = []\r\n\r\n    constructor(){\r\n\r\n    }\r\n}\r\n\r\nexport class Explosion{ // TODO: make extend particle group\r\n    pos: Vector2;\r\n    age: number = 0;\r\n    MAX_AGE: number = 0.3;\r\n    size: number;\r\n    alive: boolean = true;\r\n    constructor(pos: Vector2, size: number){\r\n        this.pos = pos;\r\n        this.size = size\r\n    }\r\n    render(view: Rect){\r\n        const drawPos = this.pos.worldToPixel(view, canvas)\r\n        const worldSize = (this.age/this.MAX_AGE) * this.size\r\n        const outerDrawPos = this.pos.plus(new Vector2(worldSize, 0)).worldToPixel(view, canvas)\r\n        const pixelSize = drawPos.distanceTo(outerDrawPos)\r\n        ctx.beginPath();\r\n        ctx.strokeStyle = `rgb(${round(255*this.age/this.MAX_AGE)}, 0, 50)`;\r\n        ctx.lineWidth = 3;\r\n        ctx.arc(drawPos.x, drawPos.y, pixelSize, 0, Math.PI*2);\r\n        ctx.stroke()\r\n    }\r\n    update(dts: number){\r\n        this.age += dts;\r\n        if(this.age > this.MAX_AGE){\r\n            this.alive = false;\r\n        }\r\n    }\r\n}","import { Player } from \"./player\"\r\nimport { mouse } from \"./mouse\";\r\nimport { keyboard } from \"./keyboard\"\r\nimport { networking, peerInterface, playerInputMessage } from \"./networking\"\r\nimport { showText, Vector2, Rect, round, getLineRect } from \"./utils\"\r\nimport { GameHost } from \"./host\";\r\nimport { Explosion } from \"./particle\";\r\nimport { generateMap } from \"./world\";\r\nimport { ctx, canvas } from \"./index\";\r\n\r\n\r\n// Handles rendering, player input, movement prediction\r\n// will run the same wether you are the host or client\r\nexport class Game {\r\n    framerate: number = 0;\r\n    frametimes: Array<number> = [];\r\n    players: Array<Player> = [];\r\n    map: Array<{ p1: Vector2, p2: Vector2 }> = [];\r\n    viewPos: Rect = new Rect(0, 0, 999, 0.2);\r\n    VIEW_MARGIN = 0.1; // draw things up to 0.2 outside view to prevent popin \r\n    outerViewPos: Rect = new Rect(0, 0, 999, 0.3);\r\n    clientTickRate = 30;\r\n    lastTickTime: number = 0; // time since last tick\r\n    inputX = 0; // rotation input + is clockwise\r\n    inputY = 0; // forwards input + is forwards\r\n    lookAngle = 0;\r\n    closesHandle: Vector2 = new Vector2(-1, -1);\r\n    closesntHandleDist = 99999;\r\n    grabbing = false;\r\n    shooting = false;\r\n    detonating = false;\r\n    us: Player | void | undefined;\r\n    explosions: Array<Explosion> = [];\r\n    createExplosion: (pos: Vector2)=>void;\r\n\r\n    constructor() {\r\n        this.players = [];\r\n\r\n        this.createExplosion = (pos: Vector2)=>{\r\n            console.log(\"called create explosion\")\r\n            for(let p of game.players){\r\n                p.impulseFrom(pos, 0.04)\r\n            }\r\n            game.explosions.push(new Explosion(pos, 0.04))\r\n        }\r\n    }\r\n\r\n    public static onPeerMsg(message: peerInterface): void {\r\n        // console.log(`get message`)\r\n        // console.log(message)\r\n        switch (message.type) {\r\n            case \"world-data\":\r\n                const mapData = generateMap(message.data)\r\n                for (let lineRaw of mapData) {\r\n                    let line = { p1: new Vector2(lineRaw.p1.x, lineRaw.p1.y), p2: new Vector2(lineRaw.p2.x, lineRaw.p2.y) };\r\n                    if (!game.map.some(x => { x == line })) { // if we dont already have it\r\n                        game.map.push(line)\r\n                    }\r\n                }\r\n                console.log(\"set map\")\r\n                break;\r\n            case \"game-state\":\r\n                // console.log(\"got game state\")\r\n                // console.log(JSON.stringify(message))\r\n                let curIds = game.players.map(x => x.id)\r\n                for (let player of message.data) {\r\n                    if (curIds.indexOf(player.id) != -1) {\r\n                        const idx = curIds.indexOf(player.id)\r\n                        game.players[idx].networkUpdate(player)\r\n                    } else {\r\n                        console.log(`created new player ${player.id}`) \r\n                        game.players.push(Player.fromPlayerData(player, game.createExplosion))\r\n                        curIds = game.players.map(x => x.id)\r\n                    }\r\n                }\r\n                networking.rtcSendObj({type:\"pong\", frame: message.frame});\r\n        }\r\n    }\r\n\r\n    render(ctx: CanvasRenderingContext2D) {\r\n        ctx.fillStyle = \"white\";\r\n        ctx.fillRect(0, 0, canvas.width, canvas.height);\r\n\r\n        ctx.fillStyle = \"red\";\r\n        ctx.arc(mouse.x, mouse.y, 10, 0, Math.PI * 2);\r\n        ctx.fill();\r\n\r\n        this.viewPos.w = this.viewPos.h * canvas.width / canvas.height\r\n\r\n        // TODO: maybe dont need to call every frame\r\n        this.outerViewPos = new Rect(\r\n            this.viewPos.x-this.VIEW_MARGIN/2,\r\n            this.viewPos.y-this.VIEW_MARGIN/2,\r\n            this.viewPos.w+this.VIEW_MARGIN,\r\n            this.viewPos.h+this.VIEW_MARGIN\r\n        );\r\n        // same here\r\n        this.us = this.getOurPlayer();\r\n\r\n        if(this.players.length >= 1){\r\n            this.drawMap();\r\n            this.drawMinimap();\r\n            this.drawPlayers();\r\n        }\r\n        \r\n\r\n        showText(ctx, Math.round(this.framerate * 100) / 100 + \"fps\", 100, 50, 30);\r\n    }\r\n\r\n    drawMinimap(){\r\n        // draw minimap\r\n        let minimapRect = { x: canvas.width - 211, y: canvas.height - 211, w: 200, h: 200 };\r\n        // background\r\n        ctx.beginPath();\r\n        ctx.fillStyle = \"rgba(200, 200, 200, 0.8)\"\r\n        ctx.rect(minimapRect.x, minimapRect.y, minimapRect.w, minimapRect.h);\r\n        ctx.fill();\r\n\r\n        // actual minimap\r\n        ctx.strokeStyle = \"rgb(0, 0, 0, 0.9)\";\r\n        ctx.lineWidth = 2;\r\n        for (let line of this.map) {\r\n            ctx.beginPath();\r\n            ctx.moveTo(minimapRect.x + line.p1.x * minimapRect.w, minimapRect.y + line.p1.y * minimapRect.h)\r\n            ctx.lineTo(minimapRect.x + line.p2.x * minimapRect.w, minimapRect.y + line.p2.y * minimapRect.h)\r\n            ctx.stroke();\r\n        }\r\n        // our viewport\r\n        ctx.beginPath();\r\n        ctx.fillStyle = \"rgba(200, 200, 200, 0.8)\"\r\n        ctx.rect(\r\n            minimapRect.x + this.viewPos.x * minimapRect.w,\r\n            minimapRect.y + this.viewPos.y * minimapRect.h,\r\n            minimapRect.w * this.viewPos.w,\r\n            minimapRect.h * this.viewPos.h);\r\n        ctx.fill();\r\n\r\n        for(let p of this.players){\r\n            // render them on minimap\r\n            ctx.beginPath();\r\n            ctx.fillStyle = \"rgba(255, 0, 0, 1)\"\r\n            ctx.rect(\r\n                minimapRect.x + p.pos.x * minimapRect.w,\r\n                minimapRect.y + p.pos.y * minimapRect.h,\r\n                10,\r\n                10);\r\n            ctx.fill();\r\n        }\r\n\r\n        // border\r\n        ctx.beginPath();\r\n        ctx.strokeStyle = \"#000\";\r\n        ctx.lineWidth = 3;\r\n        ctx.rect(minimapRect.x, minimapRect.y, minimapRect.w, minimapRect.h);\r\n        ctx.stroke();\r\n        ctx.beginPath();\r\n    }\r\n\r\n    drawMap(){\r\n        // draw map\r\n        ctx.lineWidth = 2;\r\n        ctx.strokeStyle = \"#000\";\r\n        // console.log(this.map)\r\n        this.closesHandle = new Vector2(-1, -1);\r\n        this.closesntHandleDist = 999;\r\n        for (let line of this.map) {\r\n            if (\r\n                (line.p1.x > this.outerViewPos.x && line.p1.x < this.outerViewPos.x + this.outerViewPos.w &&\r\n                    line.p1.y > this.outerViewPos.y && line.p1.y < this.outerViewPos.y + this.outerViewPos.h) ||\r\n                (line.p2.x > this.outerViewPos.x && line.p2.x < this.outerViewPos.x + this.outerViewPos.w &&\r\n                    line.p2.y > this.outerViewPos.y && line.p2.y < this.outerViewPos.y + this.outerViewPos.h)\r\n            ) { // only run for lines within view + viewMargin\r\n                const colBox = getLineRect(line);\r\n                ctx.beginPath();\r\n                if(this.us){\r\n                    if(colBox.checkPos(this.us.pos)){\r\n                        ctx.fillStyle = \"rgba(100, 100, 100, 0.5)\";\r\n                    }else{\r\n                        ctx.fillStyle = \"rgba(255, 0, 0, 0.5)\";\r\n                    }\r\n                }\r\n                const rectPix = colBox.worldToPixel(this.viewPos, canvas);\r\n                ctx.rect(rectPix.x, rectPix.y, rectPix.w, rectPix.h);\r\n                ctx.fill();\r\n                ctx.beginPath();\r\n                let start = line.p1.worldToPixel(this.viewPos, canvas)\r\n                ctx.moveTo(start.x, start.y)\r\n                let end = line.p2.worldToPixel(this.viewPos, canvas)\r\n                ctx.lineTo(end.x, end.y)\r\n                ctx.stroke();\r\n\r\n                if(this.us && !this.us.swinging){\r\n                    // finding closest handle\r\n                    const dist1 = this.playerDist(line.p1, true)\r\n                    if( dist1 < this.closesntHandleDist && !this.us.recentlySwung.some((x)=>x.p.equals(line.p1))){\r\n                        this.closesHandle = line.p1;\r\n                        this.closesntHandleDist = dist1;\r\n                    }\r\n                    const dist2 = this.playerDist(line.p2, true)\r\n                    if( dist2 < this.closesntHandleDist && !this.us.recentlySwung.some((x)=>x.p.equals(line.p2))){\r\n                        this.closesHandle = line.p2;\r\n                        this.closesntHandleDist = dist2;\r\n                    }\r\n                }\r\n            }\r\n        }\r\n\r\n        for(let explo of this.explosions){\r\n            explo.render(this.viewPos)\r\n        }\r\n\r\n        if(this.us && this.closesntHandleDist < 998){\r\n            // draw handle effect\r\n            ctx.beginPath();\r\n            ctx.strokeStyle = \"rgba(150, 150, 150, 0.8)\";\r\n            ctx.lineWidth = 5;\r\n            const us = this.getOurPlayer();\r\n            if(us){\r\n                let start = us.pos.worldToPixel(this.viewPos, canvas)\r\n                ctx.moveTo(start.x, start.y);\r\n                let end = this.closesHandle.worldToPixel(this.viewPos, canvas)\r\n                ctx.lineTo(end.x, end.y);\r\n                ctx.stroke();\r\n                ctx.beginPath();\r\n                ctx.arc(end.x, end.y, 30, 0, Math.PI*2)\r\n                ctx.stroke();\r\n            }\r\n        }\r\n    }\r\n\r\n    drawPlayers(){\r\n        // our player should be included in players list\r\n        // other players\r\n        for (let p of this.players) {\r\n            p.render(this.viewPos) // render them\r\n        }\r\n    }\r\n\r\n    // finds the distance from any world position to our player\r\n    playerDist(pos: Vector2, fast=false): number{\r\n        // fast dosent do the sqrt because if all you care about is relative distance you dont need it\r\n        if(this.us){\r\n            const ourPos = this.us.pos;\r\n            if(fast){\r\n                return (ourPos.x-pos.x)**2 + (ourPos.y-pos.y)**2\r\n            }else{\r\n                return Math.sqrt( (ourPos.x-pos.x)**2 + (ourPos.y-pos.y)**2 )\r\n            }\r\n        }\r\n        return 999;\r\n    }\r\n\r\n    getOurPlayer(): Player | void{\r\n        const matches = this.players.filter(x=>x.id===networking.id)\r\n        if(matches.length < 1){\r\n            return;\r\n        }else if(matches.length > 1){\r\n            return;\r\n        }\r\n        return matches[0];\r\n    }\r\n\r\n    update(dt: number) {\r\n        // dt in ms\r\n        const dts = dt/1000; // delta time seconds\r\n\r\n        for (let i = 0; i < this.players.length; i++) {\r\n            this.players[i].update(dt, this.map);\r\n        }\r\n\r\n\r\n        if (keyboard.checkKey(\"KeyD\")) {\r\n            this.inputX += dt;\r\n        }\r\n        if (keyboard.checkKey(\"KeyA\")) {\r\n            this.inputX -= dt;\r\n        }\r\n        if (keyboard.checkKey(\"KeyW\")) {\r\n            this.inputY += dt;\r\n        }\r\n        if (keyboard.checkKey(\"KeyS\")) {\r\n            this.inputY -= dt;\r\n        }\r\n        if(keyboard.checkKey(\"Space\")){\r\n            this.grabbing = true;\r\n        }else{\r\n            this.grabbing = false;\r\n        }\r\n        if(mouse.hasClicked(\"left\")){\r\n            this.shooting = true;\r\n        }\r\n        this.detonating = mouse.right;\r\n\r\n        this.lastTickTime += dt;\r\n\r\n        const us = this.getOurPlayer();\r\n        if(us){\r\n            const viewTarget = new Vector2(us.pos.x, us.pos.y)\r\n            // this.viewPos.setMid(this.viewPos.middle().interpolate(viewTarget, dts*5))\r\n            this.viewPos.setMid(viewTarget)\r\n            const outDrawPos = us.pos.worldToPixel(this.viewPos, canvas);\r\n            this.lookAngle = outDrawPos.angleTo( new Vector2(mouse.x, mouse.y));\r\n            us.setLookAngle(this.lookAngle)\r\n            us.takeInput(this.getInput(false), this.map) // only for local\r\n        }\r\n\r\n        for(let explo of this.explosions){\r\n            explo.update(dts);\r\n        }\r\n        this.explosions = this.explosions.filter(x=>x.alive)\r\n\r\n        this.frametimes.push(dt);\r\n        if (this.frametimes.length > 10) {\r\n            this.frametimes.shift(); // removes the oldest item\r\n        }\r\n        this.framerate = 1 / (this.frametimes.reduce((a, b) => a + b) / (1000 * this.frametimes.length));\r\n    }\r\n    joinRandomGame() {\r\n        let possibleGames = networking.gamesList.filter(x => x != networking.id)\r\n        networking.joinGame(possibleGames[0])\r\n    }\r\n    joinGame(id: number) {\r\n        if (networking.gamesList.some(x => x == id)) {\r\n            networking.joinGame(id);\r\n            gamesListOuter!.style.transform = \"translate(-50%, -200%)\";\r\n\r\n            setInterval(() => { this.sendInput() }, 1000/this.clientTickRate);\r\n            game.sendInput(); // send input back after the tick\r\n        } else {\r\n            console.log(\"game dosent exist\")\r\n        }\r\n    }\r\n\r\n    // send the server info for this client\r\n    // called this.tickrate times per second\r\n    // also used on host beacuse -2 routes host traffic directly\r\n    sendInput() {\r\n        if (networking.isReady()) { // tests if peer is ready\r\n            networking.rtcSendObj(this.getInput(), -2);\r\n        } else {\r\n            console.log(\"isnt ready\")\r\n            console.log(networking.peers, networking.peers.map(x=>`${x.peerConnection.connectionState}  ${x.peerConnection.iceConnectionState}`))\r\n        }\r\n    }\r\n\r\n    // seperate function so it can be used on host\r\n    // send frame of -1 to not perform lag calculations\r\n    getInput(forSend=true): playerInputMessage {\r\n        const obj = {\r\n            type: \"player-input\",\r\n            data: {\r\n                // set input to zero if there hasnt been any frames\r\n                // when alt tabbed intervals (this) still run but requestAnimationFrame dosent, so no frames happen\r\n                inputX: this.lastTickTime > 0 ? round(this.inputX / this.lastTickTime, 2) : 0,\r\n                inputY: this.lastTickTime > 0 ? round(this.inputY / this.lastTickTime, 2) : 0,\r\n                lookAngle: this.lookAngle,\r\n            },\r\n        } as playerInputMessage;\r\n\r\n        if(this.grabbing){ obj.data[\"swinging\"] = true }\r\n        if(this.shooting){  obj.data[\"shooting\"] = true }\r\n        if(this.detonating){ obj.data[\"detonating\"] = true }\r\n\r\n        if(forSend){\r\n            this.inputX = 0;\r\n            this.inputY = 0;\r\n\r\n            this.shooting = false;\r\n\r\n            this.lastTickTime = 0; // time since last getInput (dt added in update)\r\n        }\r\n        return obj\r\n    }\r\n    refreshGamesList() {\r\n        networking.getGames((list) => createGameList(list, networking.id!))\r\n    }\r\n\r\n    isHosting() {\r\n        return networking.hosting\r\n    }\r\n}\r\n\r\n// const physsRate: number = 100; // goal framerate for physics\r\n\r\nconst game = new Game();\r\nnetworking.setOnPeerMsg(Game.onPeerMsg)\r\nlet gameHost: GameHost | undefined; // dont initialize\r\n\r\nexport let gamesListOuter = document.getElementById(\"gameListOuter\")\r\ndocument.getElementById(\"refreshButton\")!.onclick = () => { game.refreshGamesList() }\r\ndocument.getElementById(\"testButton\")!.onclick = () => { networking.rtcSendString(\"this is working YAY!\"); console.log(\"send data\") }\r\nlet gameButton = document.getElementById(\"gameButton\");\r\nif (gameButton) {\r\n    gameButton.onclick = () => {\r\n        let x = networking.toggleVis();\r\n        gameButton!.innerHTML = x ? \"toggle game visability [x]\" : \"toggle game visability [ ]\";\r\n    }\r\n} else { console.log(\"game button didnt exist\") }\r\n\r\nconst wsConneectingMsg = document.getElementById(\"connectingMsg\");\r\nnetworking.onServerOpen = ()=>{\r\n    wsConneectingMsg!.style.display = \"none\";\r\n}\r\n\r\nfunction createGameList(list: Array<number>, ourId: number) {\r\n    // first clear previouse list\r\n    let prevItems = document.querySelectorAll(\".gameListItem\")\r\n    console.log(prevItems)\r\n    if (prevItems) {\r\n        for (var idx = 0; idx < prevItems.length; idx++) {\r\n            let item = prevItems[idx];\r\n            item.remove();\r\n        }\r\n    }\r\n    for (let id of list) {\r\n        let trNode = document.createElement(\"tr\");\r\n        trNode.classList.add(\"gameListItem\");\r\n\r\n        let nameNode = document.createElement(\"td\");\r\n        if (id == ourId) {\r\n            var nameText = document.createTextNode(\"exampleName (you)\");\r\n        } else {\r\n            var nameText = document.createTextNode(\"exampleName\");\r\n        }\r\n        nameNode.appendChild(nameText);\r\n\r\n        let idNode = document.createElement(\"td\");\r\n        let idText = document.createTextNode(id.toString());\r\n        idNode.appendChild(idText);\r\n\r\n        let playersNode = document.createElement(\"td\");\r\n        let playersText = document.createTextNode(\"exampleName\");\r\n        playersNode.appendChild(playersText);\r\n\r\n        trNode.appendChild(nameNode);\r\n        trNode.appendChild(idNode);\r\n        trNode.appendChild(playersNode);\r\n\r\n        trNode.onclick = () => { game.joinGame(id) }\r\n\r\n        document.getElementById(\"gameList\")?.appendChild(trNode);\r\n    }\r\n}\r\n\r\n// <tr class=\"gameListItem\">\r\n//     <td>Jill</td>\r\n//     <td>Smith</td>\r\n//     <td>50</td>\r\n// </tr>\r\n\r\n\r\nlet lastTick: number = performance.now()\r\nfunction tick(nowish: number) { // local updates only\r\n    let delta: number = nowish - lastTick;\r\n    lastTick = nowish;\r\n\r\n    if (game.isHosting()) {\r\n        if (!gameHost) {\r\n            gameHost = new GameHost();\r\n            game.map = gameHost.map;\r\n            // gameHost.takePlayerInput(networking.id!, game.getInput()) // send input at start\r\n            setInterval(() => { game.sendInput() }, 1000/game.clientTickRate);\r\n        }\r\n        // gameHost.tick() // gameHost sets it own interval for tick\r\n\r\n        gameHost.phyTick(delta);\r\n\r\n        game.update(delta);\r\n        game.render(ctx);\r\n    } else {\r\n        // phisUpdates = Math.ceil(delta/physRate)\r\n        if(networking.isReady() && game.players.length >= 1){\r\n            game.update(delta);\r\n            game.render(ctx);\r\n        }\r\n    }\r\n\r\n    window.requestAnimationFrame(tick);\r\n}\r\n\r\nwindow.requestAnimationFrame(tick)\r\n"],"names":["$d47e9de257a647f8$export$f85196c79fe7ed45","ctx","text","X","Y","Size","colour","stroke","beginPath","font","textAlign","fillStyle","fillText","lineWidth","strokeStyle","strokeText","$d47e9de257a647f8$export$95d9e1e745cc7977","x","y","normalize","l","Math","sqrt","this","angleFrom","from","atan2","angleTo","to","length","distanceTo","worldToView","view","w","h","screenToPixel","canvas","$d47e9de257a647f8$export$6de1183f3107a899","width","height","worldToPixel","interpolate","other","n","minus","plus","times","equals","copy","$d47e9de257a647f8$export$37c6ae4f022bed69","x1","y1","NW","NE","SW","SE","middle","setMid","pos","checkPos","x11","x2","z1","z2","doClamp","result","$d47e9de257a647f8$export$4b8705656de00c72","min","max","$d47e9de257a647f8$export$f9488fbfb886385d","power","round","$d47e9de257a647f8$export$8e558dff30604beb","line","margin","p1","p2","y11","y2","$4a59552a8e8c3aa8$export$d71d923385c48f29","map","curPos","lastPos","ofInterest","push","line1","lineAngle","curAngle","lastAngle","sign","abs","console","log","$4a59552a8e8c3aa8$export$6cb9d0fd1f1f232c","seed","size","density","lines","i","$4dd333d2a115e7fd$export$271aa840ccfeca27","id1","createBullet1","speed","angle","inputX","inputY","TURN","ACCEL","SWING_ACCEL","SWING_TURN","MAX_SPEED","DRAG","WALL_BOUNCE","swingPos","recentlySwung","swingDist","swinging","wasSwinging","wasNetSwinging","SWING_COOLDOWN","bulletPos","bulletAngle","bulletAge","bulletAlive","BULLET_SPEED","BULLET_LIFETIME","lastBulletPos","onCreateExplosion","_","lookAngle","health","ping","id","fromPlayerData","data","createBullet","Object","assign","p","random","drawPos","camera","$cMFB8","swingDrawPos","moveTo","lineTo","arc","PI","cos","sin","bulletDrawPos","fill","dt","dts","relPos","displacment","clampPos","t","filter","colLine","normal","angleToNormal","player","temp","setLookAngle","msg","closest","findClosestHandle","dist","shooting","detonating","minDist","minPos","some","dist1","dist2","dmg","diff","$2117ebda2d9d7bf8$export$a2ffe625ade3af3c","left","hasLeft","right","hasRight","hasMiddle","document","addEventListener","evt","rect","getBoundingClientRect","clientX","clientY","top","event","button","hasClicked","which","keys","code","pressedAnyKey","checkKey","key","$48ec6da7665d7908$var$Peer","localId","signaler","onPeerMsg","onNewPeerReady","ready","peerConnection","RTCPeerConnection","wsSender","onPeerReady","ondatachannel","dataChannel","channel","setDatachannelCallbacks","onicecandidate","candidate","message","src","dst","messageType","onopen","onclose","onmessage","JSON","parse","sendString","send","sendObject","object","stringify","createDataOffer","createOffer","then","OfferRTCSessionDescription","setLocalDescription","sessionDescription","createDataChannel","handleDataOffer","setRemoteDescription","createAnswer","AnswerRTCSessionDescription","answer","handleDataAnswer","handleIceCandidate","RTCIceCandidate","addIceCandidate","err","Date","now","peers","gamesList","onNewPeer","onServerOpen","visable","hosting","connected","socket","WebSocket","e","wsSend","setInterval","performance","msgObj","type","onGameList","signalHandler","wasClean","reason","onerror","error","alert","setOnPeerMsg","func","setOnNewPeer","remoteFromId","dontCreate","signaler1","response","newRemote","signal","curRemote","joinGame","gameId","rtcSendString","target","rtcSendObj","getGames","callback","setVis","set","toggleVis","every","$1c95a143d5ffff33$export$5ad038f70c97f42f","tickrate","tickNum","tickTimes","mapSeed","players","$bba8dca2a9aac9dd$export$bb97d8cd0829017a","style","transform","$48ec6da7665d7908$export$792acd62b06b04e6","takePlayerInput","takePing","tick","createExplosion","impulseFrom","num","time","shift","info","generateGameState","$bba8dca2a9aac9dd$export$b8af8fc636c3246c","phyTick","update","toData","frame","timeMatches","frameActualTime","returnFrameTime","matches","takeInput","newRandom","pos1","size2","age","MAX_AGE","alive","worldSize","outerDrawPos","pixelSize","framerate","frametimes","viewPos","VIEW_MARGIN","outerViewPos","clientTickRate","lastTickTime","closesHandle","closesntHandleDist","grabbing","explosions","$bba8dca2a9aac9dd$var$game","$4fad7be5a105c14b$export$53631fb9ca779f67","mapData","lineRaw","curIds","indexOf","idx","networkUpdate","render","fillRect","us","getOurPlayer","drawMap","drawMinimap","drawPlayers","minimapRect","colBox","rectPix","start","end","playerDist","explo","fast","ourPos","$821771deeef31435$export$ea6328a15d7d48c9","viewTarget","outDrawPos","getInput","reduce","a","b","joinRandomGame","possibleGames","sendInput","isReady","connectionState","iceConnectionState","forSend","obj","refreshGamesList","list","ourId","prevItems","querySelectorAll","remove","trNode","createElement","classList","add","nameNode","nameText","createTextNode","appendChild","idNode","idText","toString","playersNode","playersText","onclick","getElementById","$bba8dca2a9aac9dd$var$createGameList","isHosting","$bba8dca2a9aac9dd$var$gameHost","$bba8dca2a9aac9dd$var$gameButton","innerHTML","$bba8dca2a9aac9dd$var$wsConneectingMsg","display","$bba8dca2a9aac9dd$var$lastTick","window","requestAnimationFrame","$bba8dca2a9aac9dd$var$tick","nowish","delta"],"version":3,"file":"index.bcc97d5c.js.map"}